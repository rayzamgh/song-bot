name: Publish Docker Image to GCR

on:
  push:
    branches: [ main ] # Adjust this to your needs

env:
  IMAGE_NAME: song-bot
  GCR_HOST: gcr.io/portfolio-web-249407
  GCE_INSTANCE_ZONE : us-central1-c
  GCE_INSTANCE_NAME : song-bot
  INSTANCE_TEMPLATE_NAME : instance-template-1

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GCR_KEY }}
        project_id: portfolio-web-249407

    - name: Write Google Application Credentials to File
      run: |
        mkdir -p credentials
        echo -n '${{ secrets.APP_GCP_CREDENTIALS }}' > credentials/portfolio-web-249407-067e257bc8c9.json
      
    - name: Configure Docker to use the gcloud command-line tool as a credential helper
      run: gcloud --quiet auth configure-docker

    - name: Build and Push Docker image
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        GOOGLE_CSE_ID: ${{ secrets.GOOGLE_CSE_ID }}
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
        DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      run: |
        docker build \
          --build-arg GOOGLE_API_KEY=$GOOGLE_API_KEY \
          --build-arg GOOGLE_CSE_ID=$GOOGLE_CSE_ID \
          --build-arg CLIENT_ID=$CLIENT_ID \
          --build-arg CLIENT_SECRET=$CLIENT_SECRET \
          --build-arg OPENAI_API_KEY=$OPENAI_API_KEY \
          --build-arg FIREBASE_API_KEY=$FIREBASE_API_KEY \
          --build-arg DISCORD_TOKEN=$DISCORD_TOKEN \
          --build-arg GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS \
          -t $IMAGE_NAME .
        docker tag $IMAGE_NAME $GCR_HOST/$IMAGE_NAME-latest
        docker push $GCR_HOST/$IMAGE_NAME-latest

  check-instance:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GCR_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Check if GCE instance exists
        run: |
          if gcloud compute instances describe $GCE_INSTANCE_NAME --zone=$GCE_INSTANCE_ZONE; then
            echo "::set-output name=instance_exists::true"
          else
            echo "::set-output name=instance_exists::false"
          fi

  manage-instance:
    runs-on: ubuntu-latest
    needs: check-instance
    if: needs.check-instance.outputs.instance_exists == 'true'
    steps:
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GCR_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Delete existing GCE instance
        run: gcloud compute instances delete $GCE_INSTANCE_NAME --zone=$GCE_INSTANCE_ZONE --quiet


  create-instance:
    runs-on: ubuntu-latest
    needs: manage-instance
    steps:
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GCR_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Create new GCE instance from template
        run: gcloud compute instances create $GCE_INSTANCE_NAME --zone=$GCE_INSTANCE_ZONE --source-instance-template=$INSTANCE_TEMPLATE_NAME